@page "/"
@attribute [Authorize]
@inject ICippApiClient ApiClient
@inject ILogger<Dashboard> Logger

<PageTitle>Dashboard - CIPP</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-8">
        <MudText Typo="Typo.h3" Class="mb-6">Dashboard</MudText>
        
        <MudGrid>
            <MudItem xs="12" md="6" lg="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Total Tenants</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Primary">
                        @(_stats?.TotalTenants?.ToString() ?? "Loading...")
                    </MudText>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" md="6" lg="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Active Users</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Secondary">
                        @(_stats?.ActiveUsers?.ToString() ?? "Loading...")
                    </MudText>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" md="6" lg="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Alerts</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Warning">
                        @(_stats?.Alerts?.ToString() ?? "Loading...")
                    </MudText>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" md="6" lg="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Last Sync</MudText>
                    <MudText Typo="Typo.body1">
                        @(_stats?.LastSync?.ToString("MMM dd, HH:mm") ?? "Loading...")
                    </MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>

        @if (_loading) {
            <MudGrid Class="mt-6">
                <MudItem xs="12">
                    <MudSkeleton Height="200px" />
                </MudItem>
            </MudGrid>
        } else if (_error != null) {
            <MudAlert Severity="Severity.Error" Class="mt-6">
                Error loading dashboard: @_error
            </MudAlert>
        } else {
            <MudGrid Class="mt-6">
                <MudItem xs="12" lg="8">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Recent Activity</MudText>
                        @if (_recentActivity?.Any() == true) {
                            <MudTimeline>
                                @foreach (var activity in _recentActivity.Take(5)) {
                                    <MudTimelineItem Color="Color.Primary" Size="Size.Small">
                                        <ItemContent>
                                            <MudText Typo="Typo.body1">@activity.Message</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @activity.Timestamp.ToString("MMM dd, HH:mm")
                                            </MudText>
                                        </ItemContent>
                                    </MudTimelineItem>
                                }
                            </MudTimeline>
                        } else {
                            <MudText Color="Color.Secondary">No recent activity</MudText>
                        }
                    </MudPaper>
                </MudItem>
                
                <MudItem xs="12" lg="4">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Quick Actions</MudText>
                        <MudStack>
                            <MudButton Variant="Variant.Outlined" 
                                       StartIcon="@Icons.Material.Filled.Business"
                                       Href="/tenants"
                                       FullWidth="true">
                                View All Tenants
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" 
                                       StartIcon="@Icons.Material.Filled.Refresh"
                                       OnClick="@RefreshDashboard"
                                       FullWidth="true"
                                       Disabled="@_loading">
                                @if (_loading) {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                } else {
                                    <span>Refresh Data</span>
                                }
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
</MudContainer>

@code {
    private DashboardStats? _stats;
    private List<ActivityItem>? _recentActivity;
    private bool _loading = true;
    private string? _error;

    protected override async Task OnInitializedAsync() {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData() {
        _loading = true;
        _error = null;

        try {
            Logger.LogInformation(message: "Loading dashboard data");
            
            Response<DashboardStats>? statsResponse = await ApiClient.GetAsync<DashboardStats>("/dashboard/stats");
            if (statsResponse.Success) {
                _stats = statsResponse.Data;
            } else {
                Logger.LogWarning(message: "Failed to load dashboard stats: {Error}", statsResponse.Message);
                _error = statsResponse.Message;
            }

            Response<List<ActivityItem>>? activityResponse = await ApiClient.GetAsync<List<ActivityItem>>("/dashboard/activity");
            if (activityResponse.Success) {
                _recentActivity = activityResponse.Data;
            } else {
                Logger.LogWarning(message: "Failed to load recent activity: {Error}", activityResponse.Message);
            }

        } catch (Exception ex) {
            Logger.LogError(ex, message: "Error loading dashboard data");
            _error = "Failed to load dashboard data. Please try again.";
        } finally {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshDashboard() {
        await LoadDashboardData();
    }

    public class DashboardStats {
        public int? TotalTenants { get; set; }
        public int? ActiveUsers { get; set; }
        public int? Alerts { get; set; }
        public DateTime? LastSync { get; set; }
    }

    public class ActivityItem {
        public string Message { get; set; } = "";
        public DateTime Timestamp { get; set; }
        public string Type { get; set; } = "";
    }
}