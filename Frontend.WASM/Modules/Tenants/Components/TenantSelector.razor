@using CIPP.Frontend.WASM.Modules.Authentication.Services
@using CIPP.Shared.DTOs.Tenants
@using CIPP.Frontend.WASM.Modules.Authentication.Interfaces

@inject ICippApiClient _apiClient

<MudContainer MaxWidth="MaxWidth.Medium" Class="mr-4">
    @if (_isLoading)
    {
        <MudAutocomplete Label="Loading tenants..." T="TenantDto" 
            SearchFunc="Search" ToStringFunc="@(tenant => tenant?.DisplayName ?? "")"
            Disabled="true" ShowProgressIndicator="true" />
    }
    else if (_hasError)
    {
        <MudAlert Severity="Severity.Warning" Dense="true" Class="mb-2">
            Failed to load tenants. 
            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Inherit" 
                       OnClick="LoadTenantsAsync" EndIcon="@Icons.Material.Filled.Refresh">
                Retry
            </MudButton>
        </MudAlert>
    }
    else
    {
        <MudAutocomplete Label="Select Tenant" T="TenantDto" 
            Value="_selectedTenant" ValueChanged="OnTenantSelected"
            SearchFunc="Search" ToStringFunc="@(tenant => tenant?.DisplayName ?? "")"
            Clearable="true" 
            Variant="Variant.Outlined" Margin="Margin.Dense"
            MinCharacters="0" MaxItems="50" />
    }
</MudContainer>

@code {
    private List<TenantDto> _tenants = new();
    private TenantDto? _selectedTenant;
    private bool _isLoading = true;
    private bool _hasError = false;

    [Parameter] public EventCallback<TenantDto?> OnTenantChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTenantsAsync();
    }

    private async Task LoadTenantsAsync()
    {
        _isLoading = true;
        _hasError = false;
        StateHasChanged();

        try
        {
            var result = await _apiClient.GetPagedAsync<TenantDto>(endpoint: "tenants", pageNumber: 1, pageSize: 1000);
            if (result?.Items != null && result.Items.Any())
            {
                _tenants = result.Items.ToList();
                _hasError = false;
            }
            else
            {
                _tenants = new List<TenantDto>();
                _hasError = result == null;
            }
        }
        catch (Exception ex)
        {
            _tenants = new List<TenantDto>();
            _hasError = true;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<TenantDto>> Search(string? value, CancellationToken cancellationToken)
    {
        var searchValue = value ?? string.Empty;

        try
        {
            await Task.Delay(100, cancellationToken);
            if (string.IsNullOrWhiteSpace(searchValue))
            {
                return _tenants;
            }

            var searchTerm = searchValue.ToLowerInvariant();
            var filteredTenants = _tenants.Where(t => 
                (t.DisplayName?.ToLowerInvariant().Contains(searchTerm) == true) ||
                (t.DefaultDomainName?.ToLowerInvariant().Contains(searchTerm) == true) ||
                (t.TenantId?.ToLowerInvariant().Contains(searchTerm) == true)
            );

            return filteredTenants;
        }
        catch (OperationCanceledException)
        {
            return Enumerable.Empty<TenantDto>();
        }
        catch (Exception ex)
        {
            return _tenants;
        }
    }

    private async Task OnTenantSelected(TenantDto? selectedTenant)
    {
        _selectedTenant = selectedTenant;
        if (OnTenantChanged.HasDelegate)
        {
            await OnTenantChanged.InvokeAsync(selectedTenant);
        }
    }
}
