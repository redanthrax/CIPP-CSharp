@page "/tenants/global-variables"
@attribute [Authorize]
@using CIPP.Frontend.Modules.Tenants.Interfaces
@using CIPP.Frontend.Modules.Notifications.Interfaces

@inject ITenantService TenantService
@inject INotificationService NotificationService

<PageTitle>Global Variables - CIPP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h6">Global Variables</MudText>
                    <MudAlert Severity="Severity.Info" Dense="true">
                        Global variables are key-value pairs that can be used to store additional information for All Tenants. 
                        These are applied to templates in standards using the format %variablename%. 
                        If a tenant has a custom variable with the same name, the tenant's variable will take precedence.
                    </MudAlert>
                </MudStack>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButtonGroup Variant="Variant.Outlined">
                    <MudButton Color="Color.Success" 
                              StartIcon="@Icons.Material.Filled.Add"
                              OnClick="ShowAddDialog">
                        Add Variable
                    </MudButton>
                    <MudButton Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Refresh"
                              OnClick="@(() => LoadVariables(noCache: true))"
                              Disabled="@_loading">
                        @if (_loading) {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        } else {
                            <span>Refresh</span>
                        }
                    </MudButton>
                </MudButtonGroup>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            @if (_loading && (_variables == null || !_variables.Any())) {
                <div class="d-flex justify-center pa-4">
                    <MudProgressCircular Indeterminate="true" />
                </div>
                <MudText Class="text-center mt-2" Color="Color.Secondary">
                    Loading global variables...
                </MudText>
            }
            else if (_error != null) {
                <MudAlert Severity="Severity.Error" Class="mb-4">
                    Error loading global variables: @_error
                    <MudButton Color="Color.Error" 
                               Variant="Variant.Text" 
                               Size="Size.Small"
                               OnClick="@(() => LoadVariables())"
                               Class="ml-2">
                        Retry
                    </MudButton>
                </MudAlert>
            }
            else if (_variables?.Any() == true) {
                <MudDataGrid T="CustomVariable" 
                             Items="@_variables" 
                             Filterable="true" 
                             SortMode="SortMode.Multiple"
                             Loading="@_loading"
                             RowsPerPage="25">
                    <Columns>
                        <PropertyColumn Property="x => x.Key" Title="Variable Name">
                            <CellTemplate>
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.DataObject" Size="Size.Small" />
                                    <MudText Typo="Typo.body2" Style="font-family: monospace;">
                                        %@context.Item.Key%
                                    </MudText>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Value" Title="Value">
                            <CellTemplate>
                                <MudText Typo="Typo.body2" Class="text-truncate" Style="max-width: 300px;">
                                    @context.Item.Value
                                </MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <TemplateColumn Title="Actions">
                            <CellTemplate>
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudButton StartIcon="@Icons.Material.Filled.Edit"
                                               Size="Size.Small"
                                               OnClick="@(() => ShowEditDialog(context.Item))"
                                               Color="Color.Primary">
                                        Edit
                                    </MudButton>
                                    <MudButton StartIcon="@Icons.Material.Filled.Delete"
                                               Size="Size.Small"
                                               OnClick="@(() => DeleteVariable(context.Item))"
                                               Color="Color.Error">
                                        Delete
                                    </MudButton>
                                </MudButtonGroup>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="CustomVariable" />
                    </PagerContent>
                </MudDataGrid>
                
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        Total: @_variables.Count variables
                    </MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        Last updated: @(_lastUpdated?.ToString("HH:mm:ss") ?? "Never")
                    </MudText>
                </MudStack>
            }
            else {
                <MudPaper Class="pa-8 text-center" Elevation="0">
                    <MudIcon Icon="@Icons.Material.Filled.SettingsApplications" 
                             Size="Size.Large" 
                             Color="Color.Secondary" 
                             Class="mb-4" />
                    <MudText Typo="Typo.h6" Color="Color.Secondary">
                        No Global Variables
                    </MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                        Add custom variables to store global configuration that applies to all tenants.
                    </MudText>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="ShowAddDialog">
                        Add First Variable
                    </MudButton>
                </MudPaper>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

<MudDialog @bind-Visible="_showDialog" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">@(_isEditing ? "Edit Variable" : "Add Variable")</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="_dialogVariable" OnValidSubmit="SaveVariable">
            <DataAnnotationsValidator />
            <MudStack Spacing="3">
                <MudTextField @bind-Value="_dialogVariable.Key"
                              Label="Variable Name"
                              Placeholder="Enter the name for the custom variable without %"
                              Required="true"
                              Disabled="@_isEditing"
                              Validation="@(new Func<string, string>(ValidateVariableName))"
                              HelperText="Variable names cannot contain spaces or special characters" />

                <MudTextField @bind-Value="_dialogVariable.Value"
                              Label="Value"
                              Placeholder="Enter the value for the custom variable"
                              Required="true"
                              Lines="3" />
            </MudStack>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="SaveVariable"
                  Disabled="@_isSaving">
            @if (_isSaving) {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                <span>Saving...</span>
            }
            else {
                <span>@(_isEditing ? "Update" : "Add") Variable</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<CustomVariable>? _variables;
    private bool _loading = false;
    private string? _error;
    private DateTime? _lastUpdated;

    private bool _showDialog = false;
    private bool _isEditing = false;
    private bool _isSaving = false;
    private CustomVariable _dialogVariable = new();
    
    private DialogOptions _dialogOptions = new() {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        CloseButton = true,
        CloseOnEscapeKey = false
    };

    protected override async Task OnInitializedAsync() {
        await LoadVariables();
    }

    private async Task LoadVariables(bool noCache = false) {
        _loading = true;
        _error = null;
        StateHasChanged();

        try {
            // In a real implementation, this would call a custom variables endpoint
            // For now, simulate the data structure
            await Task.Delay(1000);
            
            _variables = new List<CustomVariable>
            {
                new() { Key = "CompanyName", Value = "Contoso Ltd" },
                new() { Key = "SupportEmail", Value = "support@contoso.com" },
                new() { Key = "DefaultTimeZone", Value = "Eastern Standard Time" },
                new() { Key = "BackupRetention", Value = "90" }
            };
            
            _lastUpdated = DateTime.Now;
        }
        catch (Exception ex) {
            _error = ex.Message;
            _variables = new List<CustomVariable>();
        }
        finally {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ShowAddDialog() {
        _dialogVariable = new CustomVariable();
        _isEditing = false;
        _showDialog = true;
        StateHasChanged();
    }

    private void ShowEditDialog(CustomVariable variable) {
        _dialogVariable = new CustomVariable { Key = variable.Key, Value = variable.Value };
        _isEditing = true;
        _showDialog = true;
        StateHasChanged();
    }

    private void CloseDialog() {
        _showDialog = false;
        _isSaving = false;
        StateHasChanged();
    }

    private string ValidateVariableName(string name) {
        if (string.IsNullOrWhiteSpace(name)) {
            return "Variable name is required";
        }

        var reservedVariables = new[] {
            "tenantid", "tenantname", "tenantfilter", "partnertenantid", "samappid", "cippuserschema",
            "cippurl", "defaultdomain", "serial", "systemroot", "systemdrive", "temp", "userprofile",
            "username", "userdomain", "windir", "programfiles", "programfiles(x86)", "programdata"
        };

        if (reservedVariables.Contains(name.ToLower())) {
            return "The variable name is reserved and cannot be used";
        }

        if (name.Contains(" ") || System.Text.RegularExpressions.Regex.IsMatch(name, @"[~`!#$%\^&*+=\-\[\]\\';,/{}|\"":<>\?]")) {
            return "The variable name must not contain spaces or special characters";
        }

        // Check for duplicates when adding
        if (!_isEditing && _variables?.Any(v => v.Key.Equals(name, StringComparison.OrdinalIgnoreCase)) == true) {
            return "A variable with this name already exists";
        }

        return "";
    }

    private async Task SaveVariable() {
        if (!string.IsNullOrWhiteSpace(ValidateVariableName(_dialogVariable.Key))) {
            return;
        }

        _isSaving = true;
        StateHasChanged();

        try {
            // In a real implementation, this would call the API
            await Task.Delay(1000);

            if (_isEditing) {
                var existingVariable = _variables?.FirstOrDefault(v => v.Key == _dialogVariable.Key);
                if (existingVariable != null) {
                    var index = _variables!.IndexOf(existingVariable);
                    _variables[index] = new CustomVariable { Key = _dialogVariable.Key, Value = _dialogVariable.Value };
                }
                NotificationService.ShowSuccess($"Variable '{_dialogVariable.Key}' updated successfully!");
            }
            else {
                _variables ??= new List<CustomVariable>();
                _variables.Add(new CustomVariable { Key = _dialogVariable.Key, Value = _dialogVariable.Value });
                NotificationService.ShowSuccess($"Variable '{_dialogVariable.Key}' added successfully!");
            }

            CloseDialog();
        }
        catch (Exception ex) {
            NotificationService.ShowError($"Error saving variable: {ex.Message}");
        }
        finally {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteVariable(CustomVariable variable) {
        var confirmed = await NotificationService.ShowConfirmationAsync(
            "Delete Variable", 
            $"Are you sure you want to delete the variable '{variable.Key}'? This action cannot be undone.");
            
        if (confirmed) {
            try {
                // In a real implementation, this would call the API
                await Task.Delay(500);

                _variables?.Remove(variable);
                NotificationService.ShowSuccess($"Variable '{variable.Key}' deleted successfully.");
            }
            catch (Exception ex) {
                NotificationService.ShowError($"Error deleting variable: {ex.Message}");
            }
        }
    }

    public class CustomVariable
    {
        public string Key { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }
}