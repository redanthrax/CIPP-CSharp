@page "/tenants/{TenantId:guid}/details"
@attribute [Authorize]
@using CIPP.Frontend.Modules.Tenants.Interfaces
@using CIPP.Shared.DTOs.Tenants
@using CIPP.Frontend.Modules.Notifications.Interfaces

@inject ITenantService TenantService
@inject INotificationService NotificationService
@inject NavigationManager Navigation

<PageTitle>Tenant Details - CIPP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (_isLoading) {
        <MudCard>
            <MudCardContent>
                <div class="d-flex justify-center pa-4">
                    <MudProgressCircular Indeterminate="true" />
                </div>
                <MudText Class="text-center mt-2" Color="Color.Secondary">
                    Loading tenant details...
                </MudText>
            </MudCardContent>
        </MudCard>
    }
    else if (_tenantDetails == null) {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            Tenant not found or failed to load tenant details.
            <MudButton Color="Color.Error" 
                       Variant="Variant.Text" 
                       Size="Size.Small"
                       OnClick="LoadTenantDetails"
                       Class="ml-2">
                Retry
            </MudButton>
        </MudAlert>
    }
    else {
        <MudStack Spacing="4">
            <!-- Header -->
            <MudPaper Class="pa-6">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h4">
                            @(_tenantDetails.TenantAlias ?? _tenantDetails.DisplayName)
                        </MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary">
                            @_tenantDetails.DefaultDomainName
                        </MudText>
                        <MudChip T="string" Size="Size.Small" 
                                 Color="@GetStatusColor(_tenantDetails.Status)"
                                 Variant="Variant.Filled">
                            @_tenantDetails.Status
                        </MudChip>
                    </MudStack>
                    
                    <MudButtonGroup Variant="Variant.Outlined">
                        <MudButton Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Edit"
                                  Href="@($"/tenants/{TenantId}/edit")">
                            Edit Tenant
                        </MudButton>
                        <MudButton Color="Color.Info" 
                                  StartIcon="@Icons.Material.Filled.Link"
                                  OnClick="OpenPortalLinks">
                            Portal Links
                        </MudButton>
                        <MudButton Color="Color.Secondary" 
                                  StartIcon="@Icons.Material.Filled.ArrowBack"
                                  OnClick="NavigateBackToTenants">
                            Back to Tenants
                        </MudButton>
                    </MudButtonGroup>
                </MudStack>
            </MudPaper>

            <!-- Main Content -->
            <MudGrid>
                <!-- Basic Information -->
                <MudItem xs="12" md="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Basic Information</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="2">
                                <MudStack Row>
                                    <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                        Display Name:
                                    </MudText>
                                    <MudText Typo="Typo.body2">@_tenantDetails.DisplayName</MudText>
                                </MudStack>
                                
                                <MudStack Row>
                                    <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                        Tenant ID:
                                    </MudText>
                                    <MudText Typo="Typo.body2" Style="font-family: monospace; font-size: 0.8em;">
                                        @_tenantDetails.TenantId
                                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                                      Size="Size.Small"
                                                      OnClick="() => CopyToClipboard(_tenantDetails.TenantId.ToString())" />
                                    </MudText>
                                </MudStack>
                                
                                <MudStack Row>
                                    <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                        Default Domain:
                                    </MudText>
                                    <MudText Typo="Typo.body2">@_tenantDetails.DefaultDomainName</MudText>
                                </MudStack>
                                
                                @if (!string.IsNullOrEmpty(_tenantDetails.InitialDomainName) && 
                                     _tenantDetails.InitialDomainName != _tenantDetails.DefaultDomainName) {
                                    <MudStack Row>
                                        <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                            Initial Domain:
                                        </MudText>
                                        <MudText Typo="Typo.body2">@_tenantDetails.InitialDomainName</MudText>
                                    </MudStack>
                                }
                                
                                <MudStack Row>
                                    <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                        Created:
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        @_tenantDetails.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                                    </MudText>
                                </MudStack>

                                @if (_tenantDetails.LastSyncAt.HasValue) {
                                    <MudStack Row>
                                        <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                            Last Sync:
                                        </MudText>
                                        <MudText Typo="Typo.body2">
                                            @_tenantDetails.LastSyncAt.Value.ToString("MMM dd, yyyy HH:mm")
                                        </MudText>
                                    </MudStack>
                                }
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Groups and Organization -->
                <MudItem xs="12" md="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Groups & Organization</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <!-- Tenant Groups -->
                                <MudStack Spacing="1">
                                    <MudText Typo="Typo.subtitle2">Tenant Groups</MudText>
                                    @if (_tenantDetails.Groups?.Any() == true) {
                                        <MudStack Row Spacing="1" Class="flex-wrap">
                                            @foreach (var group in _tenantDetails.Groups) {
                                                <MudChip T="string" Size="Size.Small" 
                                                        Color="Color.Secondary" 
                                                        Variant="Variant.Outlined">
                                                    @group.Name
                                                </MudChip>
                                            }
                                        </MudStack>
                                    }
                                    else {
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">No groups assigned</MudText>
                                    }
                                </MudStack>

                                <!-- Domain List -->
                                @if (_tenantDetails.DomainList?.Any() == true) {
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.subtitle2">Domains</MudText>
                                        <MudStack Spacing="1">
                                            @foreach (var domain in _tenantDetails.DomainList) {
                                                <MudChip T="string" Size="Size.Small" 
                                                        Color="Color.Info" 
                                                        Variant="Variant.Text">
                                                    @domain
                                                </MudChip>
                                            }
                                        </MudStack>
                                    </MudStack>
                                }

                                <!-- Organization Data -->
                                @if (_tenantDetails.OrganizationData != null) {
                                    <MudDivider />
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.subtitle2">Organization</MudText>
                                        <!-- Add organization data fields here when available in the DTO -->
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Organization data available</MudText>
                                    </MudStack>
                                }
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Status and Health -->
                <MudItem xs="12" md="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Status & Health</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="2">
                                <MudStack Row>
                                    <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                        Status:
                                    </MudText>
                                    <MudChip T="string" Size="Size.Small" 
                                             Color="@GetStatusColor(_tenantDetails.Status)"
                                             Variant="Variant.Filled">
                                        @_tenantDetails.Status
                                    </MudChip>
                                </MudStack>

                                <MudStack Row>
                                    <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                        Graph Errors:
                                    </MudText>
                                    <MudChip T="string" Size="Size.Small" 
                                             Color="@(_tenantDetails.GraphErrorCount > 0 ? Color.Warning : Color.Success)"
                                             Variant="Variant.Outlined">
                                        @_tenantDetails.GraphErrorCount
                                    </MudChip>
                                </MudStack>

                                @if (!string.IsNullOrEmpty(_tenantDetails.LastGraphError)) {
                                    <MudStack Row>
                                        <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                            Last Error:
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Error">
                                            @_tenantDetails.LastGraphError
                                        </MudText>
                                    </MudStack>
                                }

                                @if (_tenantDetails.Excluded) {
                                    <MudAlert Severity="Severity.Warning" Dense="true">
                                        This tenant is excluded from processing
                                        @if (_tenantDetails.ExcludeDate.HasValue) {
                                            <MudText Typo="Typo.body2">Excluded: @FormatExcludeDate(_tenantDetails.ExcludeDate.Value)</MudText>
                                        }
                                    </MudAlert>
                                }

                                @if (_tenantDetails.RequiresRefresh) {
                                    <MudAlert Severity="Severity.Info" Dense="true">
                                        This tenant requires a refresh
                                    </MudAlert>
                                }

                                @if (!string.IsNullOrEmpty(_tenantDetails.DelegatedPrivilegeStatus)) {
                                    <MudStack Row>
                                        <MudText Typo="Typo.subtitle2" Class="flex-shrink-0" Style="min-width: 120px;">
                                            GDAP Status:
                                        </MudText>
                                        <MudText Typo="Typo.body2">@_tenantDetails.DelegatedPrivilegeStatus</MudText>
                                    </MudStack>
                                }
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Portal Links -->
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Portal Links</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                @foreach (var portal in GetPortalLinks()) {
                                    <MudItem xs="6" md="3">
                                        <MudButton Variant="Variant.Outlined"
                                                  Color="Color.Primary"
                                                  StartIcon="@Icons.Material.Filled.Launch"
                                                  Href="@portal.Url"
                                                  Target="_blank"
                                                  FullWidth="true">
                                            @portal.Name
                                        </MudButton>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudStack>
    }
</MudContainer>

@code {
    [Parameter] public Guid TenantId { get; set; }
    
    private TenantDetailsDto? _tenantDetails;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync() {
        await LoadTenantDetails();
    }

    private async Task LoadTenantDetails() {
        _isLoading = true;
        StateHasChanged();
        
        try {
            var result = await TenantService.GetTenantDetailsAsync(TenantId);
            if (result.Success && result.Data != null) {
                _tenantDetails = result.Data;
            }
            else {
                NotificationService.ShowError($"Failed to load tenant: {result.Message}");
            }
        }
        catch (Exception ex) {
            NotificationService.ShowError($"Error loading tenant: {ex.Message}");
        }
        finally {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private Color GetStatusColor(string status) => status?.ToLower() switch {
        "active" => Color.Success,
        "suspended" => Color.Warning,
        "deleted" => Color.Error,
        _ => Color.Default
    };
    
    private void NavigateBackToTenants()
    {
        Navigation.NavigateTo("/tenants");
    }

    private List<PortalLink> GetPortalLinks() {
        if (_tenantDetails == null) return new List<PortalLink>();

        var domain = _tenantDetails.DefaultDomainName;
        var tenantId = _tenantDetails.TenantId;

        return new List<PortalLink> {
            new() { Name = "M365 Admin", Url = $"https://admin.microsoft.com?auth_upn={domain}" },
            new() { Name = "Exchange Admin", Url = $"https://admin.exchange.microsoft.com/?realm={domain}" },
            new() { Name = "Entra ID", Url = $"https://entra.microsoft.com/{tenantId}" },
            new() { Name = "SharePoint", Url = $"https://{domain.Split('.')[0]}-admin.sharepoint.com" },
            new() { Name = "Teams Admin", Url = $"https://admin.teams.microsoft.com/?delegatedOrg={tenantId}" },
            new() { Name = "Azure Portal", Url = $"https://portal.azure.com/{tenantId}" },
            new() { Name = "Intune", Url = $"https://endpoint.microsoft.com/{tenantId}" },
            new() { Name = "Security Center", Url = $"https://security.microsoft.com/?tid={tenantId}" },
            new() { Name = "Compliance", Url = $"https://compliance.microsoft.com/?tid={tenantId}" },
            new() { Name = "Power Platform", Url = $"https://admin.powerplatform.microsoft.com/environments?tenantId={tenantId}" },
            new() { Name = "Power BI", Url = $"https://app.powerbi.com/?tenantId={tenantId}" }
        };
    }

    private void OpenPortalLinks() {
        NotificationService.ShowInfo("Portal links are available below in the Portal Links section");
    }

    private async Task CopyToClipboard(string text) {
        await Task.Run(() => {
            // Note: Clipboard API would be implemented here
            // For now, just show a notification
            NotificationService.ShowSuccess("Copied to clipboard");
        });
    }
    
    private string FormatExcludeDate(DateTime date) => date.ToString("MMM dd, yyyy");

    public class PortalLink
    {
        public string Name { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
    }
}