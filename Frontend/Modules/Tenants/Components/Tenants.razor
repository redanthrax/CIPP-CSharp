@page "/tenants"
@attribute [Authorize]
@using CIPP.Frontend.Modules.Tenants.Interfaces
@inject ICippApiClient ApiClient
@inject ITenantService TenantService
@inject ILogger<Tenants> Logger
@inject INotificationService NotificationService

<PageTitle>Tenants - CIPP</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudText Typo="Typo.h3" Class="mb-4">Tenant Management</MudText>
        
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Available Tenants</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButtonGroup Variant="Variant.Outlined">
                        <MudButton Color="Color.Success" 
                                  StartIcon="@Icons.Material.Filled.Add"
                                  Href="/tenants/add">
                            Add Tenant
                        </MudButton>
                        <MudButton Color="Color.Secondary" 
                                  StartIcon="@Icons.Material.Filled.Group"
                                  Href="/tenants/groups">
                            Manage Groups
                        </MudButton>
                        <MudButton Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.Refresh"
                                  OnClick="@(() => LoadTenants(noCache: true))"
                                  Disabled="@_loading">
                            @if (_loading) {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            } else {
                                <span>Refresh</span>
                            }
                        </MudButton>
                    </MudButtonGroup>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @if (_loading && (_tenantsList == null || !_tenantsList.Any())) {
                    <div class="d-flex justify-center pa-4">
                        <MudProgressCircular Indeterminate="true" />
                    </div>
                    <MudText Class="text-center mt-2" Color="Color.Secondary">
                        Loading tenants...
                    </MudText>
                }
                else if (_error != null) {
                    <MudAlert Severity="Severity.Error" Class="mb-4">
                        Error loading tenants: @_error
                        <MudButton Color="Color.Error" 
                                   Variant="Variant.Text" 
                                   Size="Size.Small"
                                   OnClick="@(() => LoadTenants())"
                                   Class="ml-2">
                            Retry
                        </MudButton>
                    </MudAlert>
                }
                else if (_tenantsList?.Any() == true) {
                    <MudDataGrid T="TenantDto" 
                                 Items="@_tenantsList" 
                                 Filterable="true" 
                                 SortMode="SortMode.Multiple"
                                 Loading="@_loading"
                                 RowsPerPage="25">
                        <Columns>
                            <PropertyColumn Property="x => x.DisplayName" Title="Display Name">
                                <CellTemplate>
                                    <MudStack Row>
                                        <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Small" />
                                        <MudText>@context.Item.DisplayName</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.DefaultDomainName" Title="Domain">
                                <CellTemplate>
                                    <MudChip Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined">
                                        @context.Item.DefaultDomainName
                                    </MudChip>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.Status" Title="Status">
                                <CellTemplate>
                                    <MudChip Size="Size.Small" 
                                             Color="@GetStatusColor(context.Item.Status)"
                                             Variant="Variant.Filled">
                                        @context.Item.Status
                                    </MudChip>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.CreatedAt" Title="Created" Format="yyyy-MM-dd HH:mm">
                                <CellTemplate>
                                    <MudText Typo="Typo.body2">
                                        @context.Item.CreatedAt.ToString("MMM dd, yyyy")
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @context.Item.CreatedAt.ToString("HH:mm")
                                    </MudText>
                                </CellTemplate>
                            </PropertyColumn>
                            <TemplateColumn Title="Actions">
                                <CellTemplate>
                                    <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                        <MudButton StartIcon="@Icons.Material.Filled.Visibility"
                                                   Size="Size.Small"
                                                   Href="@($"/tenants/{context.Item.TenantId}/details")"
                                                   Color="Color.Info">
                                            View
                                        </MudButton>
                                        <MudButton StartIcon="@Icons.Material.Filled.Edit"
                                                   Size="Size.Small"
                                                   Href="@($"/tenants/{context.Item.TenantId}/edit")"
                                                   Color="Color.Primary">
                                            Edit
                                        </MudButton>
                                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                            <MudMenuItem Icon="@Icons.Material.Filled.Link"
                                                        OnClick="@(() => OpenPortals(context.Item))">
                                                Portal Links
                                            </MudMenuItem>
                                            <MudMenuItem Icon="@Icons.Material.Filled.Backup"
                                                        Href="@($"/tenants/{context.Item.TenantId}/backup")">
                                                Configure Backup
                                            </MudMenuItem>
                                            <MudDivider />
                                            <MudMenuItem Icon="@Icons.Material.Filled.Delete"
                                                        IconColor="Color.Error"
                                                        OnClick="@(() => DeleteTenant(context.Item))">
                                                Delete
                                            </MudMenuItem>
                                        </MudMenu>
                                    </MudButtonGroup>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="TenantDto" />
                        </PagerContent>
                    </MudDataGrid>
                    
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-4">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            Total: @_tenantsList.Count tenants
                        </MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            Last updated: @(_lastUpdated?.ToString("HH:mm:ss") ?? "Never")
                        </MudText>
                    </MudStack>
                }
                else {
                    <MudPaper Class="pa-8 text-center" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.BusinessCenter" 
                                 Size="Size.Large" 
                                 Color="Color.Secondary" 
                                 Class="mb-4" />
                        <MudText Typo="Typo.h6" Color="Color.Secondary">
                            No tenants found
                        </MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                            It looks like there are no tenants configured yet.
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="@(() => LoadTenants())">
                            Check Again
                        </MudButton>
                    </MudPaper>
                }
            </MudCardContent>
        </MudCard>
    </MudContainer>

@code {
    private List<TenantDto>? _tenantsList;
    private bool _loading = false;
    private string? _error;
    private DateTime? _lastUpdated;

    protected override async Task OnInitializedAsync() {
        await LoadTenants();
    }

    private async Task LoadTenants(bool noCache = false) {
        _loading = true;
        _error = null;
        StateHasChanged();

        try {
            PagedResponse<TenantDto>? pagedResponse = await TenantService.GetTenantsAsync(
                pageNumber: 1, 
                pageSize: 100,
                allTenants: true,
                noCache: noCache
            );
            
            if (pagedResponse?.Items != null) {
                _tenantsList = pagedResponse.Items;
                _lastUpdated = DateTime.Now;
            } else {
                _tenantsList = new List<TenantDto>();
            }
        }
        catch (Exception ex) {
            _error = ex.Message;
            _tenantsList = new List<TenantDto>();
        }
        finally {
            _loading = false;
            StateHasChanged();
        }
    }

    private Color GetStatusColor(string status) => status?.ToLower() switch {
        "active" => Color.Success,
        "suspended" => Color.Warning,
        "deleted" => Color.Error,
        _ => Color.Default
    };

    private void OpenPortals(TenantDto tenant) {
        var portalLinks = new List<string> {
            $"https://portal.office.com/?auth_upn={tenant.DefaultDomainName}",
            $"https://admin.exchange.com/?realm={tenant.DefaultDomainName}",
            $"https://entra.microsoft.com/{tenant.TenantId}",
            $"https://portal.azure.com/{tenant.TenantId}",
            $"https://endpoint.microsoft.com/{tenant.TenantId}"
        };

        // This would typically open a dialog with portal links
        NotificationService.ShowInfo($"Portal links available for {tenant.DisplayName}");
    }

    private async Task DeleteTenant(TenantDto tenant) {
        var confirmed = await NotificationService.ShowConfirmationAsync(
            "Delete Tenant", 
            $"Are you sure you want to delete tenant '{tenant.DisplayName}'? This action cannot be undone.");
            
        if (confirmed) {
            try {
                var result = await TenantService.DeleteTenantAsync(tenant.TenantId);
            if (result.Success) {
                    NotificationService.ShowSuccess($"Tenant '{tenant.DisplayName}' deleted successfully.");
                    await LoadTenants(noCache: true);
                }
                else {
                    NotificationService.ShowError($"Failed to delete tenant: {result.Message}");
                }
            }
            catch (Exception ex) {
                NotificationService.ShowError($"Error deleting tenant: {ex.Message}");
            }
        }
    }
}
