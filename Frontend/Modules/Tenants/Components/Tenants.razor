@namespace Frontend.Modules.Tenants.Components

@page "/tenants"
@using CIPP.Frontend.Modules.Authentication.Interfaces
@using CIPP.Frontend.Modules.Authentication.Services
@using CIPP.Shared.DTOs
@using CIPP.Shared.DTOs.Tenants
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@inject ICippApiClient ApiClient
@inject ILogger<Tenants> Logger

<PageTitle>Tenants</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Tenant Management</MudText>
    
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Available Tenants</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          StartIcon="Icons.Material.Filled.Refresh"
                          OnClick="() => LoadTenants(noCache: true)">
                    Refresh
                </MudButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            @if (Loading) {
                <div class="d-flex justify-center pa-4">
                    <MudProgressCircular Indeterminate="true" />
                </div>
            }
            else if (Error != null) {
                <MudAlert Severity="Severity.Error" Class="mb-4">
                    Error loading tenants: @Error
                </MudAlert>
            }
            else if (TenantsList?.Any() == true) {
                <MudDataGrid T="TenantDto" Items="@TenantsList" Filterable="true" SortMode="SortMode.Multiple">
                    <Columns>
                        <PropertyColumn Property="x => x.DisplayName" Title="Display Name" />
                        <PropertyColumn Property="x => x.DefaultDomainName" Title="Domain" />
                        <PropertyColumn Property="x => x.Status" Title="Status" />
                        <PropertyColumn Property="x => x.CreatedAt" Title="Created" Format="yyyy-MM-dd HH:mm" />
                        <PropertyColumn Property="x => x.TenantId" Title="Tenant ID" />
                    </Columns>
                </MudDataGrid>
            }
            else {
                <MudText>No tenants found.</MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<TenantDto>? TenantsList;
    private bool Loading = false;
    private string? Error;

    protected override async Task OnInitializedAsync() {
        await LoadTenants();
    }

    private async Task LoadTenants(bool noCache = false) {
        Loading = true;
        Error = null;
        StateHasChanged();

        try {
            PagedResponse<TenantDto>? pagedResponse = await ApiClient.GetPagedAsync<TenantDto>(endpoint: "/tenants", noCache: noCache);
            TenantsList = pagedResponse.Items;
        }
        catch (Exception ex) {
            Logger.LogError(ex, "Failed to load tenants");
            Error = ex.Message;
            TenantsList = new List<TenantDto>();
        }
        finally {
            Loading = false;
            StateHasChanged();
        }
    }
}
