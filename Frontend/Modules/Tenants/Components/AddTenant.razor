@page "/tenants/add"
@attribute [Authorize]
@using CIPP.Frontend.Modules.Tenants.Interfaces
@using CIPP.Shared.DTOs.Tenants
@using CIPP.Frontend.Modules.Notifications.Interfaces
@using System.ComponentModel.DataAnnotations

@inject ITenantService TenantService
@inject INotificationService NotificationService
@inject NavigationManager Navigation

<PageTitle>Add Tenant - CIPP</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-6">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h4" Class="mb-4">Add New Tenant</MudText>
            
            <MudStepper @ref="_stepper" @bind-ActiveIndex="_activeStepIndex" Class="mb-4">
                <MudStep Title="Tenant Type">
                    <ChildContent>
                        <MudStack Spacing="4" Class="pa-4">
                            <MudText Typo="Typo.h6">New Tenant Deployment</MudText>
                            <MudText Typo="Typo.body1" Color="Color.Secondary">
                                Choose the type of tenant you would like to deploy.
                            </MudText>
                            
                            <MudRadioGroup T="string" @bind-Value="_tenantType" Required="true">
                                <MudRadio Value="@("CustomerTenant")" Color="Color.Primary" Dense="true">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Business" />
                                        <MudStack Spacing="0">
                                            <MudText Typo="Typo.subtitle1">Customer Tenant</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                I would like to deploy a new tenant for my customer
                                            </MudText>
                                        </MudStack>
                                    </MudStack>
                                </MudRadio>
                            </MudRadioGroup>
                        </MudStack>
                    </ChildContent>
                </MudStep>

                <MudStep Title="Tenant Details">
                    <ChildContent>
                        <EditForm Model="_tenantRequest" OnValidSubmit="ValidateStep2">
                            <DataAnnotationsValidator />
                            <MudStack Spacing="4" Class="pa-4">
                                <MudText Typo="Typo.h6">Company Information</MudText>
                                <MudDivider />
                                
                                <MudStack Spacing="3">
                                    <MudTextField @bind-Value="_tenantRequest.TenantName"
                                                  Label="Tenant Name"
                                                  Placeholder="Enter the desired subdomain for the onmicrosoft.com domain"
                                                  Required="true"
                                                  Validation="@(new Func<string, string>(ValidateTenantName))"
                                                  HelperText="This will create [name].onmicrosoft.com"
                                                  Adornment="Adornment.End"
                                                  AdornmentText=".onmicrosoft.com"
                                                  Immediate="true"
                                                  DebounceInterval="500" />

                                    <MudTextField @bind-Value="_tenantRequest.CompanyName"
                                                  Label="Company Name"
                                                  Placeholder="Enter the registered company/organization name"
                                                  Required="true" />
                                </MudStack>

                                <MudText Typo="Typo.h6" Class="mt-4">Address Information</MudText>
                                <MudDivider />
                                
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="_tenantRequest.AddressLine1"
                                                      Label="Address Line 1"
                                                      Placeholder="Enter the primary address line"
                                                      Required="true" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="_tenantRequest.AddressLine2"
                                                      Label="Address Line 2"
                                                      Placeholder="Enter the secondary address line (optional)" />
                                    </MudItem>
                                    <MudItem xs="12" md="4">
                                        <MudTextField @bind-Value="_tenantRequest.City"
                                                      Label="City"
                                                      Placeholder="Enter the city"
                                                      Required="true" />
                                    </MudItem>
                                    <MudItem xs="12" md="4">
                                        <MudTextField @bind-Value="_tenantRequest.State"
                                                      Label="State/Region"
                                                      Placeholder="Enter the state or region"
                                                      Required="true" />
                                    </MudItem>
                                    <MudItem xs="12" md="4">
                                        <MudTextField @bind-Value="_tenantRequest.PostalCode"
                                                      Label="Postal Code"
                                                      Placeholder="Enter the postal code"
                                                      Required="true" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="_tenantRequest.Country"
                                                      Label="Country"
                                                      Placeholder="Enter the country (e.g., US)"
                                                      Required="true" />
                                    </MudItem>
                                </MudGrid>

                                <MudText Typo="Typo.h6" Class="mt-4">Contact Information</MudText>
                                <MudDivider />
                                
                                <MudGrid>
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="_tenantRequest.FirstName"
                                                      Label="First Name"
                                                      Placeholder="Enter the first name of the contact person"
                                                      Required="true" />
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="_tenantRequest.LastName"
                                                      Label="Last Name"
                                                      Placeholder="Enter the last name of the contact person"
                                                      Required="true" />
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="_tenantRequest.Email"
                                                      Label="Email"
                                                      Placeholder="Enter the customer's email address"
                                                      Required="true"
                                                      InputType="InputType.Email" />
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="_tenantRequest.PhoneNumber"
                                                      Label="Phone Number"
                                                      Placeholder="Enter the contact phone number"
                                                      Required="true" />
                                    </MudItem>
                                </MudGrid>
                            </MudStack>
                        </EditForm>
                    </ChildContent>
                </MudStep>

                <MudStep Title="Confirmation">
                    <ChildContent>
                        <MudStack Spacing="4" Class="pa-4">
                            <MudText Typo="Typo.h6">Review and Confirm</MudText>
                            <MudText Typo="Typo.body1" Color="Color.Secondary">
                                Please review the tenant details below and click "Create Tenant" to proceed.
                            </MudText>
                            
                            <MudCard Outlined="true">
                                <MudCardContent>
                                    <MudStack Spacing="2">
                                        <MudText Typo="Typo.subtitle1"><strong>Tenant Information</strong></MudText>
                                        <MudText><strong>Domain:</strong> @(_tenantRequest.TenantName).onmicrosoft.com</MudText>
                                        <MudText><strong>Company:</strong> @_tenantRequest.CompanyName</MudText>
                                        
                                        <MudDivider Class="my-2" />
                                        
                                        <MudText Typo="Typo.subtitle1"><strong>Address</strong></MudText>
                                        <MudText>@_tenantRequest.AddressLine1</MudText>
                                        @if (!string.IsNullOrEmpty(_tenantRequest.AddressLine2)) {
                                            <MudText>@_tenantRequest.AddressLine2</MudText>
                                        }
                                        <MudText>@_tenantRequest.City, @_tenantRequest.State @_tenantRequest.PostalCode</MudText>
                                        <MudText>@_tenantRequest.Country</MudText>
                                        
                                        <MudDivider Class="my-2" />
                                        
                                        <MudText Typo="Typo.subtitle1"><strong>Contact</strong></MudText>
                                        <MudText>@_tenantRequest.FirstName @_tenantRequest.LastName</MudText>
                                        <MudText>@_tenantRequest.Email</MudText>
                                        <MudText>@_tenantRequest.PhoneNumber</MudText>
                                    </MudStack>
                                </MudCardContent>
                            </MudCard>
                        </MudStack>
                    </ChildContent>
                </MudStep>
            </MudStepper>

            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Text" 
                          StartIcon="@Icons.Material.Filled.ArrowBack"
                          OnClick="NavigateBackToTenants">
                    Back to Tenants
                </MudButton>
                
                <MudButtonGroup>
                    <MudButton Variant="Variant.Outlined" 
                              OnClick="PreviousStep"
                              Disabled="@(_activeStepIndex == 0 || _isCreating)">
                        Previous
                    </MudButton>
                    
                    @if (_activeStepIndex < 2) {
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary"
                                  OnClick="NextStep"
                                  Disabled="@(!IsCurrentStepValid() || _isCreating)">
                            Next
                        </MudButton>
                    }
                    else {
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Success"
                                  StartIcon="@Icons.Material.Filled.Save"
                                  OnClick="CreateTenant"
                                  Disabled="@_isCreating">
                            @if (_isCreating) {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <span>Creating...</span>
                            }
                            else {
                                <span>Create Tenant</span>
                            }
                        </MudButton>
                    }
                </MudButtonGroup>
            </MudStack>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private MudStepper? _stepper;
    private int _activeStepIndex = 0;
    private AddTenantRequestDto _tenantRequest = new();
    private string _tenantType = "CustomerTenant";
    private bool _isCreating = false;
    
    private bool _step1Valid = false;
    private bool _step2Valid = false;
    private string? _domainValidationError;
    
    protected override void OnInitialized() {
        _step1Valid = !string.IsNullOrEmpty(_tenantType);
    }

    private void OnActiveStepIndexChanged(int index) {
        _activeStepIndex = index;
        ValidateCurrentStep();
    }

    private string ValidateTenantName(string tenantName) {
        if (string.IsNullOrWhiteSpace(tenantName)) {
            _domainValidationError = "Tenant name is required";
            return _domainValidationError;
        }
        
        if (tenantName.Length < 3) {
            _domainValidationError = "Tenant name must be at least 3 characters";
            return _domainValidationError;
        }
        
        if (!System.Text.RegularExpressions.Regex.IsMatch(tenantName, @"^[a-zA-Z0-9-]+$")) {
            _domainValidationError = "Tenant name can only contain letters, numbers, and hyphens";
            return _domainValidationError;
        }
        
        ValidateDomainAsync(tenantName);
        return _domainValidationError ?? "";
    }

    private async void ValidateDomainAsync(string tenantName) {
        if (string.IsNullOrWhiteSpace(tenantName) || tenantName.Length < 3) {
            return;
        }

        try {
            var result = await TenantService.ValidateTenantDomainAsync(tenantName);
            if (result.Success && result.Data != null) {
                if (!result.Data.Success) {
                    _domainValidationError = result.Data.Message;
                } else if (!result.Data.IsAvailable) {
                    _domainValidationError = "Domain is not available";
                } else {
                    _domainValidationError = null;
                }
            } else {
                _domainValidationError = "Unable to validate domain";
            }
        } catch {
            _domainValidationError = "Unable to validate domain";
        }
        
        StateHasChanged();
    }

    private void ValidateStep2() {
        _step2Valid = !string.IsNullOrWhiteSpace(_tenantRequest.TenantName) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.CompanyName) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.AddressLine1) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.City) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.State) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.PostalCode) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.Country) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.FirstName) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.LastName) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.Email) &&
                     !string.IsNullOrWhiteSpace(_tenantRequest.PhoneNumber) &&
                     string.IsNullOrEmpty(_domainValidationError);
    }

    private void ValidateCurrentStep() {
        switch (_activeStepIndex) {
            case 0:
                _step1Valid = !string.IsNullOrEmpty(_tenantType);
                break;
            case 1:
                ValidateStep2();
                break;
        }
        StateHasChanged();
    }

    private bool IsCurrentStepValid() {
        return _activeStepIndex switch {
            0 => _step1Valid,
            1 => _step2Valid,
            2 => true,
            _ => false
        };
    }

    private void NextStep() {
        ValidateCurrentStep();
        if (IsCurrentStepValid() && _activeStepIndex < 2) {
            _activeStepIndex++;
        }
    }

    private void PreviousStep() {
        if (_activeStepIndex > 0) {
            _activeStepIndex--;
        }
    }

    private async Task CreateTenant() {
        if (!_step2Valid) return;
        
        _isCreating = true;
        StateHasChanged();
        
        try {
            var result = await TenantService.AddTenantAsync(_tenantRequest);
            
            if (result.Success && result.Data != null) {
                NotificationService.ShowSuccess($"Tenant '{result.Data.DisplayName}' created successfully!");
                Navigation.NavigateTo("/tenants");
            }
            else {
                NotificationService.ShowError($"Failed to create tenant: {result.Message ?? "Unknown error"}");
            }
        }
        catch (Exception ex) {
            NotificationService.ShowError($"Error creating tenant: {ex.Message}");
        }
        finally {
            _isCreating = false;
            StateHasChanged();
        }
    }
    
    private void NavigateBackToTenants()
    {
        Navigation.NavigateTo("/tenants");
    }
}
