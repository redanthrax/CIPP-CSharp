@page "/tenant/administration/alert-configuration/add"
@page "/tenant/administration/alert-configuration/edit"
@attribute [Authorize]
@using CIPP.Frontend.Modules.Authentication.Interfaces
@using CIPP.Shared.DTOs.Alerts
@using CIPP.Shared.DTOs.Tenants
@using CIPP.Frontend.Modules.Notifications.Interfaces
@using System.ComponentModel.DataAnnotations

@inject ICippApiClient ApiClient
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(IsEditMode ? "Edit" : "Add") Alert Configuration - CIPP</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudStack Spacing="4">
        <!-- Header -->
        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudButton Variant="Variant.Text"
                      StartIcon="@Icons.Material.Filled.ArrowBack"
                      OnClick="@(() => Navigation.NavigateTo("/tenant/administration/alert-configuration"))">
                Back to Alerts
            </MudButton>
        </MudStack>

        <MudText Typo="Typo.h4">@(IsEditMode ? "Edit" : "Add") Alert Configuration</MudText>

        @if (_loading && IsEditMode)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
        }
        else
        {
            <!-- Alert Type Selection -->
            @if (_selectedAlertType == AlertType.None)
            {
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudCard Class="cursor-pointer hover:shadow-lg transition-shadow">
                            <MudCardActions>
                                <MudButton OnClick="@(() => SelectAlertType(AlertType.AuditLog))" FullWidth="true" Variant="Variant.Text">
                                    <MudCardContent Class="pa-4">
                                        <MudText Typo="Typo.h6" Class="mb-2">Audit Log Alert</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                                            Select this option to create an alert based on a received Microsoft Audit log.
                                        </MudText>
                                    </MudCardContent>
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudCard Class="cursor-pointer hover:shadow-lg transition-shadow">
                            <MudCardActions>
                                <MudButton OnClick="@(() => SelectAlertType(AlertType.Scripted))" FullWidth="true" Variant="Variant.Text">
                                    <MudCardContent Class="pa-4">
                                        <MudText Typo="Typo.h6" Class="mb-2">Scripted CIPP Alert</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                                            Select this option to set up an alert based on data processed by CIPP.
                                        </MudText>
                                    </MudCardContent>
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            }

            <!-- Alert Forms -->
            @if (_selectedAlertType == AlertType.AuditLog)
            {
                <AuditLogAlertForm @ref="_auditForm" 
                                  AlertData="_editingAlert"
                                  IsEditMode="IsEditMode"
                                  OnSave="HandleSaveAlert"
                                  OnCancel="HandleCancel" />
            }
            else if (_selectedAlertType == AlertType.Scripted)
            {
                <ScriptedAlertForm @ref="_scriptedForm" 
                                  AlertData="_editingAlert"
                                  IsEditMode="IsEditMode"
                                  OnSave="HandleSaveAlert"
                                  OnCancel="HandleCancel" />
            }
        }
    </MudStack>
</MudContainer>

@code {
    [Parameter, SupplyParameterFromQuery] public string? Id { get; set; }
    [Parameter, SupplyParameterFromQuery] public bool Clone { get; set; } = false;

    private bool IsEditMode => !string.IsNullOrEmpty(Id);
    private bool _loading = false;
    private AlertType _selectedAlertType = AlertType.None;
    private AlertConfigurationDto? _editingAlert;
    
    // Component references
    private AuditLogAlertForm? _auditForm;
    private ScriptedAlertForm? _scriptedForm;

    private enum AlertType {
        None,
        AuditLog,
        Scripted
    }

    protected override async Task OnInitializedAsync() {
        if (IsEditMode) {
            await LoadExistingAlert();
        }
    }

    private async Task LoadExistingAlert() {
        _loading = true;
        StateHasChanged();

        try {
            var result = await ApiClient.GetAsync<List<AlertConfigurationDto>>("/v1/alerts");
            if (result?.Success == true && result.Data != null) {
                _editingAlert = result.Data.FirstOrDefault(a => a.RowKey == Id);
                if (_editingAlert != null) {
                    // Determine alert type based on data
                    _selectedAlertType = _editingAlert.LogType == "Scripted" ? AlertType.Scripted : AlertType.AuditLog;
                    
                    if (Clone) {
                        _editingAlert.RowKey = string.Empty; // Clear ID for cloning
                    }
                } else {
                    NotificationService.ShowError("Alert not found");
                    Navigation.NavigateTo("/tenant/administration/alert-configuration");
                }
            } else {
                NotificationService.ShowError("Failed to load alert data");
                Navigation.NavigateTo("/tenant/administration/alert-configuration");
            }
        } catch (Exception ex) {
            NotificationService.ShowError($"Error loading alert: {ex.Message}");
            Navigation.NavigateTo("/tenant/administration/alert-configuration");
        } finally {
            _loading = false;
            StateHasChanged();
        }
    }

    private void SelectAlertType(AlertType alertType) {
        _selectedAlertType = alertType;
        StateHasChanged();
    }

    private Task HandleSaveAlert() {
        try {
            NotificationService.ShowSuccess("Alert configuration saved successfully");
            Navigation.NavigateTo("/tenant/administration/alert-configuration");
        } catch (Exception ex) {
            NotificationService.ShowError($"Error saving alert: {ex.Message}");
        }
        return Task.CompletedTask;
    }

    private void HandleCancel() {
        Navigation.NavigateTo("/tenant/administration/alert-configuration");
    }
}