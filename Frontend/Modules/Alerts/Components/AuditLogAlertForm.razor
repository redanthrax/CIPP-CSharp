@using CIPP.Frontend.Modules.Authentication.Interfaces
@using CIPP.Shared.DTOs.Alerts
@using CIPP.Shared.DTOs.Tenants
@using CIPP.Frontend.Modules.Notifications.Interfaces
@using CIPP.Frontend.Modules.Tenants.Interfaces
@using System.ComponentModel.DataAnnotations

@inject ICippApiClient ApiClient
@inject INotificationService NotificationService
@inject ITenantService TenantService

<EditForm Model="@_formModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />

    <MudGrid>
        <!-- Tenant Selection -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h6" Class="mb-4">Tenant Selection</MudText>
                
                <MudStack Spacing="3">
                    <TenantSelectorOptions @key="@("audit-log-main-tenant")"
                                         Value="_selectedTenant"
                                         ValueChanged="@((TenantSelectorOptionDto? value) => { _selectedTenant = value; ValidateForm(); })"
                                         Label="Select Tenant for Alert"
                                         Required="true"
                                         IncludeAllTenants="true"
                                         IncludeGroups="true" />

                    @if (_selectedTenant?.Value == "AllTenants")
                    {
                        <TenantSelectorOptions @key="@("audit-log-excluded-tenant")"
                                             Value="_excludedTenant"
                                             ValueChanged="@((TenantSelectorOptionDto? value) => { _excludedTenant = value; OnExcludedTenantSelected(); })"
                                             Label="Excluded Tenants (optional)"
                                             Required="false"
                                             IncludeAllTenants="false"
                                             IncludeGroups="false" />

                        @if (_excludedTenants.Count > 0)
                        {
                            <MudStack Row Spacing="1" Class="flex-wrap">
                                @foreach (var excluded in _excludedTenants)
                                {
                                    <MudChip T="string" OnClose="@(() => RemoveExcludedTenant(excluded))" 
                                           Variant="Variant.Filled" 
                                           Color="Color.Secondary">
                                        @excluded.Label
                                    </MudChip>
                                }
                            </MudStack>
                        }
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

        <!-- Alert Criteria -->
        <MudItem xs="12">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                    <MudText Typo="Typo.h6">Alert Criteria</MudText>
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             OnClick="@HandleSubmit"
                             StartIcon="@Icons.Material.Filled.Save"
                             Disabled="@(!_isFormValid)">
                        Save Alert
                    </MudButton>
                </MudStack>

                <MudStack Spacing="3">
                    <!-- Logbook Selection -->
                    <MudSelect Value="_formModel.Logbook" 
                             ValueChanged="@((AlertLogbookDto? value) => { _formModel.Logbook = value; ValidateForm(); })"
                             Label="Select the log source"
                             Required="true"
                             ToStringFunc="@(l => l?.Label ?? "")">
                        @foreach (var logbook in _logbookOptions)
                        {
                            <MudSelectItem Value="@logbook">@logbook.Label</MudSelectItem>
                        }
                    </MudSelect>

                    <!-- Add Condition Button -->
                    <MudButton Variant="Variant.Outlined" 
                             StartIcon="@Icons.Material.Filled.Add"
                             OnClick="@AddCondition">
                        Add a condition
                    </MudButton>

                    <!-- Conditions -->
                    @for (int i = 0; i < _formModel.Conditions.Count; i++)
                    {
                        var index = i; // Capture loop variable
                        var condition = _formModel.Conditions[index];
                        
                        <MudPaper Class="pa-3" Elevation="1">
                            <MudStack Row Spacing="2" AlignItems="AlignItems.End">
                                <MudItem xs="4">
                                    <MudAutocomplete T="AlertPropertyDto"
                                                   Value="condition.Property"
                                                   ValueChanged="@((AlertPropertyDto? value) => { condition.Property = value; ValidateForm(); })"
                                                   SearchFunc="@(async (value, token) => await SearchProperties(value, token))"
                                                   Label="Select property"
                                                   ToStringFunc="@(p => p?.Label ?? "")"
                                                   Clearable="true">
                                        <ItemTemplate Context="prop">
                                            <MudText>@prop.Label</MudText>
                                        </ItemTemplate>
                                    </MudAutocomplete>
                                </MudItem>
                                
                                <MudItem xs="3">
                                    <MudSelect Value="condition.Operator" 
                                             ValueChanged="@((AlertOperatorDto? value) => { condition.Operator = value; ValidateForm(); })"
                                             Label="Operator"
                                             ToStringFunc="@(o => o?.Label ?? "")">
                                        @foreach (var op in _operatorOptions)
                                        {
                                            <MudSelectItem Value="@op">@op.Label</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                
                                <MudItem xs="4">
                                    @if (condition.Property?.Value == "String")
                                    {
                                        <MudTextField Value="condition.Input!.Value"
                                                    ValueChanged="@((string? value) => { condition.Input!.Value = value; ValidateForm(); })"
                                                    Label="Input"
                                                    Required="true" />
                                    }
                                    else if (condition.Property != null)
                                    {
                                        @if (condition.Property.Multi)
                                        {
                                            <MudSelect T="string" Value="condition.Input!.Value" ValueChanged="@((string? value) => { condition.Input!.Value = value; ValidateForm(); })" Label="Input" Clearable="true">
                                                @{
                                                    var options = SearchInputOptions(condition.Property, "", CancellationToken.None).Result;
                                                }
                                                @foreach (var option in options)
                                                {
                                                    <MudSelectItem Value="@option">@option</MudSelectItem>
                                                }
                                            </MudSelect>
                                        }
                                        else
                                        {
                                            <MudAutocomplete T="string"
                                                           Value="condition.Input!.Value"
                                                           ValueChanged="@((string? value) => { condition.Input!.Value = value; ValidateForm(); })"
                                                           SearchFunc="@(async (value, token) => await SearchInputOptions(condition.Property, value, token))"
                                                           Label="Input"
                                                           Clearable="true" />
                                        }
                                    }
                                </MudItem>
                                
                                <MudItem xs="1">
                                    <MudTooltip Text="Remove condition">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                     Color="Color.Error"
                                                     OnClick="@(() => RemoveCondition(index))" />
                                    </MudTooltip>
                                </MudItem>
                            </MudStack>
                        </MudPaper>
                    }

                    <!-- Actions -->
                    <MudSelect T="AlertActionDto" SelectedValues="_selectedActions" SelectedValuesChanged="@((IEnumerable<AlertActionDto> values) => { _selectedActions = values; ValidateForm(); })" MultiSelection="true" Label="Actions to take" Required="true" ToStringFunc="@(a => a?.Label ?? "")">
                        @foreach (var action in _actionOptions)
                        {
                            <MudSelectItem T="AlertActionDto" Value="@action">@action.Label</MudSelectItem>
                        }
                    </MudSelect>

                    @if (_selectedActions.Any())
                    {
                        <MudStack Row Spacing="1" Class="flex-wrap">
                            @foreach (var action in _selectedActions)
                            {
                                <MudChip T="string" Variant="Variant.Filled" Color="Color.Primary">
                                    @action.Label
                                </MudChip>
                            }
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter] public AlertConfigurationDto? AlertData { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private CreateAuditLogAlertDto _formModel = new();
    private bool _isFormValid = false;
    
    // Form data
    private TenantSelectorOptionDto? _selectedTenant;
    private TenantSelectorOptionDto? _excludedTenant;
    private List<TenantSelectorOptionDto> _excludedTenants = new();
    private IEnumerable<AlertActionDto> _selectedActions = new List<AlertActionDto>();
    
    // Available options
    private List<AlertLogbookDto> _logbookOptions = new();
    private List<AlertOperatorDto> _operatorOptions = new();
    private List<AlertActionDto> _actionOptions = new();
    private List<AlertPropertyDto> _propertyOptions = new();

    protected override async Task OnInitializedAsync() {
        await LoadOptions();
        
        if (AlertData != null && IsEditMode) {
            await LoadAlertData();
        } else {
            // Initialize with default condition
            _formModel.Conditions.Add(new AlertConditionDto {
                Property = new AlertPropertyDto(),
                Operator = new AlertOperatorDto(),
                Input = new AlertInputDto()
            });
        }
        
        ValidateForm();
    }

    private Task LoadOptions() {
        _logbookOptions = new List<AlertLogbookDto> {
            new() { Label = "Azure AD", Value = "Audit.AzureActiveDirectory" },
            new() { Label = "Exchange", Value = "Audit.Exchange" }
        };

        _operatorOptions = new List<AlertOperatorDto> {
            new() { Label = "Equals to", Value = "eq" },
            new() { Label = "Not Equals to", Value = "ne" },
            new() { Label = "Like", Value = "like" },
            new() { Label = "Not like", Value = "notlike" },
            new() { Label = "Does not match", Value = "notmatch" },
            new() { Label = "Greater than", Value = "gt" },
            new() { Label = "Less than", Value = "lt" },
            new() { Label = "In", Value = "in" },
            new() { Label = "Not In", Value = "notIn" }
        };

        _actionOptions = new List<AlertActionDto> {
            new() { Label = "Execute a BEC Remediate", Value = "becremediate" },
            new() { Label = "Disable the user in the log entry", Value = "disableuser" },
            new() { Label = "Generate an email", Value = "generatemail" },
            new() { Label = "Generate a PSA ticket", Value = "generatePSA" },
            new() { Label = "Generate a webhook", Value = "generateWebhook" }
        };


        _propertyOptions = new List<AlertPropertyDto> {
            new() { Label = "User", Value = "String" },
            new() { Label = "Application", Value = "String" },
            new() { Label = "Operation", Value = "String" },
            new() { Label = "Result", Value = "String" }
        };
        return Task.CompletedTask;
    }

    private Task LoadAlertData() {
        // Load existing alert data when editing
        if (AlertData != null) {
            // Map alert data to form fields
            // This implementation can be expanded based on specific requirements
            _selectedTenant = AlertData.Tenants?.FirstOrDefault();
        }
        return Task.CompletedTask;
    }


    private Task<IEnumerable<AlertPropertyDto>> SearchProperties(string value, CancellationToken token) {
        if (string.IsNullOrWhiteSpace(value)) {
            return Task.FromResult<IEnumerable<AlertPropertyDto>>(_propertyOptions);
        }
        return Task.FromResult<IEnumerable<AlertPropertyDto>>(_propertyOptions.Where(p => p.Label.Contains(value, StringComparison.OrdinalIgnoreCase)));
    }

    private Task<IEnumerable<AlertActionDto>> SearchActions(string value, CancellationToken token) {
        if (string.IsNullOrWhiteSpace(value)) {
            return Task.FromResult<IEnumerable<AlertActionDto>>(_actionOptions);
        }
        return Task.FromResult<IEnumerable<AlertActionDto>>(_actionOptions.Where(a => a.Label.Contains(value, StringComparison.OrdinalIgnoreCase)));
    }

    private Task<IEnumerable<string>> SearchInputOptions(AlertPropertyDto property, string value, CancellationToken token) {
        // This would return available options based on the selected property
        var options = new List<string> { "Option 1", "Option 2", "Option 3" };
        if (string.IsNullOrWhiteSpace(value)) {
            return Task.FromResult<IEnumerable<string>>(options);
        }
        return Task.FromResult<IEnumerable<string>>(options.Where(o => o.Contains(value, StringComparison.OrdinalIgnoreCase)));
    }

    private void RemoveExcludedTenant(TenantSelectorOptionDto tenant) {
        _excludedTenants.Remove(tenant);
        ValidateForm();
        StateHasChanged();
    }

    private void OnExcludedTenantSelected() {
        if (_excludedTenant != null && !_excludedTenants.Contains(_excludedTenant)) {
            _excludedTenants.Add(_excludedTenant);
            _excludedTenant = null;
            ValidateForm();
            StateHasChanged();
        }
    }

    private void AddCondition() {
        _formModel.Conditions.Add(new AlertConditionDto {
            Property = new AlertPropertyDto(),
            Operator = new AlertOperatorDto(),
            Input = new AlertInputDto()
        });
        ValidateForm();
        StateHasChanged();
    }

    private void RemoveCondition(int index) {
        if (_formModel.Conditions.Count > 1) {
            _formModel.Conditions.RemoveAt(index);
            ValidateForm();
            StateHasChanged();
        }
    }

    private async Task HandleSubmit() {
        try {
            // Populate form model with UI values
            _formModel.TenantFilter = _selectedTenant != null ? new List<TenantSelectorOptionDto> { _selectedTenant } : new();
            _formModel.ExcludedTenants = _excludedTenants;
            _formModel.Actions = _selectedActions.ToList();

            // Filter out empty conditions
            _formModel.Conditions = _formModel.Conditions
                .Where(c => c.Property != null && !string.IsNullOrEmpty(c.Property.Label))
                .ToList();

            var result = await ApiClient.PostAsync<string>("/v1/alerts/audit-log", _formModel);
            if (result?.Success == true) {
                await OnSave.InvokeAsync();
            } else {
                NotificationService.ShowError($"Error saving alert: {result?.Message ?? "Unknown error"}");
            }
        } catch (Exception ex) {
            NotificationService.ShowError($"Error saving alert: {ex.Message}");
        }
    }

    private void ValidateForm() {
        _isFormValid = _selectedTenant != null &&
                      _formModel.Logbook != null &&
                      _formModel.Conditions.Any(c => c.Property != null && 
                                               !string.IsNullOrEmpty(c.Property.Label) &&
                                               c.Operator != null && 
                                               !string.IsNullOrEmpty(c.Operator.Label) &&
                                               c.Input != null && 
                                               !string.IsNullOrEmpty(c.Input.Value)) &&
                      _selectedActions.Any();
    }
}
